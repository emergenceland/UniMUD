/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class TesterTable : IMudTable
    {
        public class TesterTableUpdate : RecordUpdate
        {
            public string? Key;
            public string? PreviousKey;
            public int? Value;
            public int? PreviousValue;
        }

        public readonly static string ID = "Tester";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? Key;
        public int? Value;

        public override Type TableType()
        {
            return typeof(TesterTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(TesterTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            TesterTable other = (TesterTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Key != other.Key)
            {
                return false;
            }
            if (Value != other.Value)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Key = (string)functionParameters[0];

            Value = (int)functionParameters[1];
        }

        public static IObservable<RecordUpdate> GetTesterTableUpdates()
        {
            TesterTable mudTable = new TesterTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            Key = (string)property["key"];
            Value = (int)property["value"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            string? currentKeyTyped = null;
            string? previousKeyTyped = null;

            if (currentValue != null && currentValue.ContainsKey("key"))
            {
                currentKeyTyped = (string)currentValue["key"];
            }

            if (previousValue != null && previousValue.ContainsKey("key"))
            {
                previousKeyTyped = (string)currentValue["key"];
            }
            int? currentValueTyped = null;
            int? previousValueTyped = null;

            if (currentValue != null && currentValue.ContainsKey("value"))
            {
                currentValueTyped = (int)currentValue["value"];
            }

            if (previousValue != null && previousValue.ContainsKey("value"))
            {
                previousValueTyped = (int)currentValue["value"];
            }

            return new TesterTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                Key = currentKeyTyped,
                PreviousKey = previousKeyTyped,
                Value = currentValueTyped,
                PreviousValue = previousValueTyped,
            };
        }
    }
}
