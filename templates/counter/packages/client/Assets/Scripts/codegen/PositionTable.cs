/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class PositionTable : IMudTable
    {
        public class PositionTableUpdate : RecordUpdate
        {
            public string? Key;
            public string? PreviousKey;
            public int? X;
            public int? PreviousX;
            public int? Y;
            public int? PreviousY;
            public bool? HasWaited;
            public bool? PreviousHasWaited;
        }

        public readonly static string ID = "Position";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? Key;
        public int? X;
        public int? Y;
        public bool? HasWaited;

        public override Type TableType()
        {
            return typeof(PositionTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PositionTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            PositionTable other = (PositionTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Key != other.Key)
            {
                return false;
            }
            if (X != other.X)
            {
                return false;
            }
            if (Y != other.Y)
            {
                return false;
            }
            if (HasWaited != other.HasWaited)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Key = (string)functionParameters[0];

            X = (int)functionParameters[1];

            Y = (int)functionParameters[2];

            HasWaited = (bool)functionParameters[3];
        }

        public static IObservable<RecordUpdate> GetPositionTableUpdates()
        {
            PositionTable mudTable = new PositionTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            Key = (string)property["key"];
            X = (int)property["x"];
            Y = (int)property["y"];
            HasWaited = (bool)property["hasWaited"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            string? currentKeyTyped = null;
            string? previousKeyTyped = null;

            if (currentValue != null && currentValue.ContainsKey("key"))
            {
                currentKeyTyped = (string)currentValue["key"];
            }

            if (previousValue != null && previousValue.ContainsKey("key"))
            {
                previousKeyTyped = (string)currentValue["key"];
            }
            int? currentXTyped = null;
            int? previousXTyped = null;

            if (currentValue != null && currentValue.ContainsKey("x"))
            {
                currentXTyped = (int)currentValue["x"];
            }

            if (previousValue != null && previousValue.ContainsKey("x"))
            {
                previousXTyped = (int)currentValue["x"];
            }
            int? currentYTyped = null;
            int? previousYTyped = null;

            if (currentValue != null && currentValue.ContainsKey("y"))
            {
                currentYTyped = (int)currentValue["y"];
            }

            if (previousValue != null && previousValue.ContainsKey("y"))
            {
                previousYTyped = (int)currentValue["y"];
            }
            bool? currentHasWaitedTyped = null;
            bool? previousHasWaitedTyped = null;

            if (currentValue != null && currentValue.ContainsKey("haswaited"))
            {
                currentHasWaitedTyped = (bool)currentValue["haswaited"];
            }

            if (previousValue != null && previousValue.ContainsKey("haswaited"))
            {
                previousHasWaitedTyped = (bool)currentValue["haswaited"];
            }

            return new PositionTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                Key = currentKeyTyped,
                PreviousKey = previousKeyTyped,
                X = currentXTyped,
                PreviousX = previousXTyped,
                Y = currentYTyped,
                PreviousY = previousYTyped,
                HasWaited = currentHasWaitedTyped,
                PreviousHasWaited = previousHasWaitedTyped,
            };
        }
    }
}
