/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class AllTypesTable : IMudTable
    {
        public class AllTypesTableUpdate : RecordUpdate
        {
            public string? Key;
            public string? PreviousKey;
            public bool? BoolTest;
            public bool? PreviousBoolTest;
            public int? Int32Test;
            public int? PreviousInt32Test;
            public uint? Uint32Test;
            public uint? PreviousUint32Test;
            public System.Numerics.BigInteger? BigUintTest;
            public System.Numerics.BigInteger? PreviousBigUintTest;
            public string? EntityTest;
            public string? PreviousEntityTest;
            public string? AddressTest;
            public string? PreviousAddressTest;
        }

        public readonly static string ID = "AllTypes";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public string? Key;
        public bool? BoolTest;
        public int? Int32Test;
        public uint? Uint32Test;
        public System.Numerics.BigInteger? BigUintTest;
        public string? EntityTest;
        public string? AddressTest;

        public override Type TableType()
        {
            return typeof(AllTypesTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(AllTypesTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            AllTypesTable other = (AllTypesTable)obj;

            if (other == null)
            {
                return false;
            }
            if (Key != other.Key)
            {
                return false;
            }
            if (BoolTest != other.BoolTest)
            {
                return false;
            }
            if (Int32Test != other.Int32Test)
            {
                return false;
            }
            if (Uint32Test != other.Uint32Test)
            {
                return false;
            }
            if (BigUintTest != other.BigUintTest)
            {
                return false;
            }
            if (EntityTest != other.EntityTest)
            {
                return false;
            }
            if (AddressTest != other.AddressTest)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            Key = (string)functionParameters[0];

            BoolTest = (bool)functionParameters[1];

            Int32Test = (int)functionParameters[2];

            Uint32Test = (uint)functionParameters[3];

            BigUintTest = (System.Numerics.BigInteger)functionParameters[4];

            EntityTest = (string)functionParameters[5];

            AddressTest = (string)functionParameters[6];
        }

        public static IObservable<RecordUpdate> GetAllTypesTableUpdates()
        {
            AllTypesTable mudTable = new AllTypesTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            Key = (string)property["key"];
            BoolTest = (bool)property["boolTest"];
            Int32Test = (int)property["int32Test"];
            Uint32Test = (uint)property["uint32Test"];
            BigUintTest = (System.Numerics.BigInteger)property["bigUintTest"];
            EntityTest = (string)property["entityTest"];
            AddressTest = (string)property["addressTest"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            string? currentKeyTyped = null;
            string? previousKeyTyped = null;

            if (currentValue != null && currentValue.ContainsKey("key"))
            {
                currentKeyTyped = (string)currentValue["key"];
            }

            if (previousValue != null && previousValue.ContainsKey("key"))
            {
                previousKeyTyped = (string)currentValue["key"];
            }
            bool? currentBoolTestTyped = null;
            bool? previousBoolTestTyped = null;

            if (currentValue != null && currentValue.ContainsKey("booltest"))
            {
                currentBoolTestTyped = (bool)currentValue["booltest"];
            }

            if (previousValue != null && previousValue.ContainsKey("booltest"))
            {
                previousBoolTestTyped = (bool)currentValue["booltest"];
            }
            int? currentInt32TestTyped = null;
            int? previousInt32TestTyped = null;

            if (currentValue != null && currentValue.ContainsKey("int32test"))
            {
                currentInt32TestTyped = (int)currentValue["int32test"];
            }

            if (previousValue != null && previousValue.ContainsKey("int32test"))
            {
                previousInt32TestTyped = (int)currentValue["int32test"];
            }
            uint? currentUint32TestTyped = null;
            uint? previousUint32TestTyped = null;

            if (currentValue != null && currentValue.ContainsKey("uint32test"))
            {
                currentUint32TestTyped = (uint)(int)currentValue["uint32test"];
            }

            if (previousValue != null && previousValue.ContainsKey("uint32test"))
            {
                previousUint32TestTyped = (uint)(int)previousValue["uint32test"];
            }
            System.Numerics.BigInteger? currentBigUintTestTyped = null;
            System.Numerics.BigInteger? previousBigUintTestTyped = null;

            if (currentValue != null && currentValue.ContainsKey("biguinttest"))
            {
                currentBigUintTestTyped = (System.Numerics.BigInteger)currentValue["biguinttest"];
            }

            if (previousValue != null && previousValue.ContainsKey("biguinttest"))
            {
                previousBigUintTestTyped = (System.Numerics.BigInteger)currentValue["biguinttest"];
            }
            string? currentEntityTestTyped = null;
            string? previousEntityTestTyped = null;

            if (currentValue != null && currentValue.ContainsKey("entitytest"))
            {
                currentEntityTestTyped = (string)currentValue["entitytest"];
            }

            if (previousValue != null && previousValue.ContainsKey("entitytest"))
            {
                previousEntityTestTyped = (string)currentValue["entitytest"];
            }
            string? currentAddressTestTyped = null;
            string? previousAddressTestTyped = null;

            if (currentValue != null && currentValue.ContainsKey("addresstest"))
            {
                currentAddressTestTyped = (string)currentValue["addresstest"];
            }

            if (previousValue != null && previousValue.ContainsKey("addresstest"))
            {
                previousAddressTestTyped = (string)currentValue["addresstest"];
            }

            return new AllTypesTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                Key = currentKeyTyped,
                PreviousKey = previousKeyTyped,
                BoolTest = currentBoolTestTyped,
                PreviousBoolTest = previousBoolTestTyped,
                Int32Test = currentInt32TestTyped,
                PreviousInt32Test = previousInt32TestTyped,
                Uint32Test = currentUint32TestTyped,
                PreviousUint32Test = previousUint32TestTyped,
                BigUintTest = currentBigUintTestTyped,
                PreviousBigUintTest = previousBigUintTestTyped,
                EntityTest = currentEntityTestTyped,
                PreviousEntityTest = previousEntityTestTyped,
                AddressTest = currentAddressTestTyped,
                PreviousAddressTest = previousAddressTestTyped,
            };
        }
    }
}
