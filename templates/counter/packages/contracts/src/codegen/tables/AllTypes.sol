// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("AllTypes")))
);
ResourceId constant AllTypesTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x005d060001040420201400000000000000000000000000000000000000000000
);

library AllTypes {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](6);
    _valueSchema[0] = SchemaType.BOOL;
    _valueSchema[1] = SchemaType.INT32;
    _valueSchema[2] = SchemaType.UINT32;
    _valueSchema[3] = SchemaType.UINT256;
    _valueSchema[4] = SchemaType.BYTES32;
    _valueSchema[5] = SchemaType.ADDRESS;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "boolTest";
    fieldNames[1] = "int32Test";
    fieldNames[2] = "uint32Test";
    fieldNames[3] = "bigUintTest";
    fieldNames[4] = "entityTest";
    fieldNames[5] = "addressTest";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get boolTest.
   */
  function getBoolTest(bytes32 key) internal view returns (bool boolTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get boolTest.
   */
  function _getBoolTest(bytes32 key) internal view returns (bool boolTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get boolTest (using the specified store).
   */
  function getBoolTest(IStore _store, bytes32 key) internal view returns (bool boolTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set boolTest.
   */
  function setBoolTest(bytes32 key, bool boolTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((boolTest)), _fieldLayout);
  }

  /**
   * @notice Set boolTest.
   */
  function _setBoolTest(bytes32 key, bool boolTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((boolTest)), _fieldLayout);
  }

  /**
   * @notice Set boolTest (using the specified store).
   */
  function setBoolTest(IStore _store, bytes32 key, bool boolTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((boolTest)), _fieldLayout);
  }

  /**
   * @notice Get int32Test.
   */
  function getInt32Test(bytes32 key) internal view returns (int32 int32Test) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get int32Test.
   */
  function _getInt32Test(bytes32 key) internal view returns (int32 int32Test) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get int32Test (using the specified store).
   */
  function getInt32Test(IStore _store, bytes32 key) internal view returns (int32 int32Test) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set int32Test.
   */
  function setInt32Test(bytes32 key, int32 int32Test) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((int32Test)), _fieldLayout);
  }

  /**
   * @notice Set int32Test.
   */
  function _setInt32Test(bytes32 key, int32 int32Test) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((int32Test)), _fieldLayout);
  }

  /**
   * @notice Set int32Test (using the specified store).
   */
  function setInt32Test(IStore _store, bytes32 key, int32 int32Test) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((int32Test)), _fieldLayout);
  }

  /**
   * @notice Get uint32Test.
   */
  function getUint32Test(bytes32 key) internal view returns (uint32 uint32Test) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get uint32Test.
   */
  function _getUint32Test(bytes32 key) internal view returns (uint32 uint32Test) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get uint32Test (using the specified store).
   */
  function getUint32Test(IStore _store, bytes32 key) internal view returns (uint32 uint32Test) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set uint32Test.
   */
  function setUint32Test(bytes32 key, uint32 uint32Test) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((uint32Test)), _fieldLayout);
  }

  /**
   * @notice Set uint32Test.
   */
  function _setUint32Test(bytes32 key, uint32 uint32Test) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((uint32Test)), _fieldLayout);
  }

  /**
   * @notice Set uint32Test (using the specified store).
   */
  function setUint32Test(IStore _store, bytes32 key, uint32 uint32Test) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((uint32Test)), _fieldLayout);
  }

  /**
   * @notice Get bigUintTest.
   */
  function getBigUintTest(bytes32 key) internal view returns (uint256 bigUintTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get bigUintTest.
   */
  function _getBigUintTest(bytes32 key) internal view returns (uint256 bigUintTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get bigUintTest (using the specified store).
   */
  function getBigUintTest(IStore _store, bytes32 key) internal view returns (uint256 bigUintTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set bigUintTest.
   */
  function setBigUintTest(bytes32 key, uint256 bigUintTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((bigUintTest)), _fieldLayout);
  }

  /**
   * @notice Set bigUintTest.
   */
  function _setBigUintTest(bytes32 key, uint256 bigUintTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((bigUintTest)), _fieldLayout);
  }

  /**
   * @notice Set bigUintTest (using the specified store).
   */
  function setBigUintTest(IStore _store, bytes32 key, uint256 bigUintTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((bigUintTest)), _fieldLayout);
  }

  /**
   * @notice Get entityTest.
   */
  function getEntityTest(bytes32 key) internal view returns (bytes32 entityTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get entityTest.
   */
  function _getEntityTest(bytes32 key) internal view returns (bytes32 entityTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get entityTest (using the specified store).
   */
  function getEntityTest(IStore _store, bytes32 key) internal view returns (bytes32 entityTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set entityTest.
   */
  function setEntityTest(bytes32 key, bytes32 entityTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((entityTest)), _fieldLayout);
  }

  /**
   * @notice Set entityTest.
   */
  function _setEntityTest(bytes32 key, bytes32 entityTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((entityTest)), _fieldLayout);
  }

  /**
   * @notice Set entityTest (using the specified store).
   */
  function setEntityTest(IStore _store, bytes32 key, bytes32 entityTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((entityTest)), _fieldLayout);
  }

  /**
   * @notice Get addressTest.
   */
  function getAddressTest(bytes32 key) internal view returns (address addressTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get addressTest.
   */
  function _getAddressTest(bytes32 key) internal view returns (address addressTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get addressTest (using the specified store).
   */
  function getAddressTest(IStore _store, bytes32 key) internal view returns (address addressTest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set addressTest.
   */
  function setAddressTest(bytes32 key, address addressTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((addressTest)), _fieldLayout);
  }

  /**
   * @notice Set addressTest.
   */
  function _setAddressTest(bytes32 key, address addressTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((addressTest)), _fieldLayout);
  }

  /**
   * @notice Set addressTest (using the specified store).
   */
  function setAddressTest(IStore _store, bytes32 key, address addressTest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((addressTest)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    bytes32 key
  )
    internal
    view
    returns (
      bool boolTest,
      int32 int32Test,
      uint32 uint32Test,
      uint256 bigUintTest,
      bytes32 entityTest,
      address addressTest
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    bytes32 key
  )
    internal
    view
    returns (
      bool boolTest,
      int32 int32Test,
      uint32 uint32Test,
      uint256 bigUintTest,
      bytes32 entityTest,
      address addressTest
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(
    IStore _store,
    bytes32 key
  )
    internal
    view
    returns (
      bool boolTest,
      int32 int32Test,
      uint32 uint32Test,
      uint256 bigUintTest,
      bytes32 entityTest,
      address addressTest
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 key,
    bool boolTest,
    int32 int32Test,
    uint32 uint32Test,
    uint256 bigUintTest,
    bytes32 entityTest,
    address addressTest
  ) internal {
    bytes memory _staticData = encodeStatic(boolTest, int32Test, uint32Test, bigUintTest, entityTest, addressTest);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 key,
    bool boolTest,
    int32 int32Test,
    uint32 uint32Test,
    uint256 bigUintTest,
    bytes32 entityTest,
    address addressTest
  ) internal {
    bytes memory _staticData = encodeStatic(boolTest, int32Test, uint32Test, bigUintTest, entityTest, addressTest);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    bytes32 key,
    bool boolTest,
    int32 int32Test,
    uint32 uint32Test,
    uint256 bigUintTest,
    bytes32 entityTest,
    address addressTest
  ) internal {
    bytes memory _staticData = encodeStatic(boolTest, int32Test, uint32Test, bigUintTest, entityTest, addressTest);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool boolTest,
      int32 int32Test,
      uint32 uint32Test,
      uint256 bigUintTest,
      bytes32 entityTest,
      address addressTest
    )
  {
    boolTest = (_toBool(uint8(Bytes.slice1(_blob, 0))));

    int32Test = (int32(uint32(Bytes.slice4(_blob, 1))));

    uint32Test = (uint32(Bytes.slice4(_blob, 5)));

    bigUintTest = (uint256(Bytes.slice32(_blob, 9)));

    entityTest = (Bytes.slice32(_blob, 41));

    addressTest = (address(Bytes.slice20(_blob, 73)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  )
    internal
    pure
    returns (
      bool boolTest,
      int32 int32Test,
      uint32 uint32Test,
      uint256 bigUintTest,
      bytes32 entityTest,
      address addressTest
    )
  {
    (boolTest, int32Test, uint32Test, bigUintTest, entityTest, addressTest) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool boolTest,
    int32 int32Test,
    uint32 uint32Test,
    uint256 bigUintTest,
    bytes32 entityTest,
    address addressTest
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(boolTest, int32Test, uint32Test, bigUintTest, entityTest, addressTest);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool boolTest,
    int32 int32Test,
    uint32 uint32Test,
    uint256 bigUintTest,
    bytes32 entityTest,
    address addressTest
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(boolTest, int32Test, uint32Test, bigUintTest, entityTest, addressTest);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
